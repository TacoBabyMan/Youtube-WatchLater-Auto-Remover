// ==UserScript==
// @name         Auto Ejector
// @namespace    bing bong
// @version      100
// @description  Auto Eject of user from playlist
// @author       Neo Sahadeo
// @match        https://www.youtube.com/*
// @grant        none
// ==/UserScript==

(
  function mainscript(){
    const pageLoading = setInterval(()=>{
      if(document.getElementById('end')!=null){
        clearInterval(pageLoading);
        let cookieList=decodeURIComponent(document.cookie);
        let url = window.location.href;
        let autoRemoveAllowed = false;
        const svgHasRunColour=()=>{document.getElementById("addedSettings").style.filter="invert(63%) sepia(98%) saturate(437%) hue-rotate(308deg) brightness(97%) contrast(120%)"};
        const svgSetColour=()=>{document.getElementById("addedSettings").style.filter="invert(32%) sepia(16%) saturate(4998%) hue-rotate(193deg) brightness(103%) contrast(105%)"};
        const svgUnsetColour=()=>{document.getElementById("addedSettings").style.filter=""};
        if(url.includes("&list=")){
          window.location.replace(url.slice(0,url.indexOf("&list=")));
        }
        function cssInjection(){
          document.querySelector('html').insertAdjacentHTML("afterbegin",`
             <style name="neo_css_injection">
               tp-yt-iron-overlay-backdrop{
                 display:none !important;
               }
             </style>
             <clickBlock style="display:block;position:absolute;top:0px;left:0px;width:100%;height:100vh;z-index:9999;background-color:transparent;">
             </clickBlock>
             `);
        };cssInjection();
        function hidePlaylist(){
          document.querySelector('html').insertAdjacentHTML("afterbegin",`
             <style name="playlistHide">
               tp-yt-paper-dialog{
                 display:none !important;
                 z-index: -9999;
               }
               tp-yt-iron-overlay-backdrop{
                 z-index: -9999 !important;
                 transition: opacity 0s !important;
               }
             </style>
             `);
        }hidePlaylist();
        document.getElementById('end').insertAdjacentHTML("afterbegin",`
        <svg width="24" height="17" viewBox="0 0 24 17" fill="none" xmlns="http://www.w3.org/2000/svg" id="addedSettings" style="margin:20px;cursor:pointer">
          <rect x="0.5" y="0.5" width="23" height="16" stroke="white"/>
          <rect x="5" y="4" width="14" height="3" fill="white"/>
          <rect x="5" y="10" width="14" height="3" fill="white"/>
        </svg>
        <style name="neos_overwrites">
          [class="ytp-chrome-bottom"] > *{
            z-index: 10000 !important;
          }
          [id="actions-inner"] > *{
            z-index: 10000 !important;
          }
        </style>
        `);

        if((cookieList.search('removeWatchLater=true'))>0){
          autoRemoveAllowed=true;
          svgSetColour();
        }else{
          autoRemoveAllowed=false;
        }
        function settingJSInserter(){
          document.getElementById("addedSettings").addEventListener("click",()=>{watchLaterActive()});
          document.addEventListener("keypress",function keycheck(e){
            if(e.key=="e" && document.activeElement == document.querySelector('body')) watchLaterActive();
          });
        }settingJSInserter();
        function watchLaterActive(){
          cookieList=decodeURIComponent(document.cookie);
          if((cookieList.search('removeWatchLater=false'))>0){
            document.cookie="removeWatchLater=true";//turns on
            location.reload();
          }
          if((cookieList.search('removeWatchLater=true'))>0){
            document.cookie="removeWatchLater=false";//turn off
            cookieList=decodeURIComponent(document.cookie);
            svgUnsetColour();
          }
          if((cookieList.search('removeWatchLater'))==-1){
            document.cookie="removeWatchLater=true";
            location.reload();
          }
        };
        //---------------------------------------------------------------------------------------
        let lastUrl = location.href;
        let fromSender = false;
        new MutationObserver(() => {
          const url = location.href;
          if (url != lastUrl) {
            svgSetColour();
            fromSender = true;
            mainThread();
          }
          lastUrl = url;
        }).observe(document, {subtree: true, childList: true});

        function eventsCheck(){
          return new Promise(resolve=>{
            if(url.includes("watch")){
              resolve(true);
              console.log('truth')
            }else{
              resolve(false);
            }
          });
        }

        function playlistloadicontree(){
          return new Promise(resolve =>{
            let playlistIconLoad = setInterval(()=>{
              if(document.querySelector('[aria-label="Save to playlist"]')!=null){
                clearInterval(playlistIconLoad);
                resolve()
              }
            },100);
          });
        }
        function click(){
          return new Promise(resolve =>{
            if(document.querySelector('[name="playlistHide"]')==null){
              hidePlaylist();
            }
            if(document.querySelector('[name="neo_css_injection"]')==null){
              cssInjection();
            }
            document.querySelector('[aria-label="Save to playlist"]').click()
            let playlistLoad = setInterval(()=>{
              if((document.querySelector('tp-yt-paper-dialog')!=null) && ((document.querySelector('[name="playlistHide"]')!=null)) && (document.querySelector('[name="neo_css_injection"]')!=null)){
                clearInterval(playlistLoad);
                resolve();
              }
            },100);
          });
        };
        function watchLaterButton(){
          return new Promise(resolve =>{
            let x = (((document.querySelector('[aria-label="Watch later Private"]').parentNode).parentNode).parentNode).parentNode;
            if(!x.children[0].children[0].children[0].classList.contains('hidden')){
              x.children[0].click();
            }
            document.querySelector('[aria-label="Save to playlist"]').click();
            let playlistHidden = setInterval(()=>{
              if(document.querySelector('tp-yt-paper-dialog').style.display == 'none'){
                clearInterval(playlistHidden);
                setTimeout(()=>{
                  document.querySelector('[name="playlistHide"]').remove();
                  document.querySelector('[name="neo_css_injection"]').remove();
                },1000);
                document.querySelector('clickBlock').remove();
                svgHasRunColour();
                resolve();
              }
            },100);
          });
        }
        function reset(){
          return new Promise(resolve =>{
            if(document.querySelector('[name="playlistHide"]')!=null){
              document.querySelector('[name="playlistHide"]').remove();
            }
            if(document.querySelector('[name="neo_css_injection"]')!=null){
              document.querySelector('[name="neo_css_injection"]').remove();
            }
            if(document.querySelector('clickBlock')!=null){
              document.querySelector('clickBlock').remove();
            }
            resolve();
          });
        }
        async function mainThread(){
          if(await eventsCheck() || fromSender){
            await playlistloadicontree();
            await click();
            await watchLaterButton();
            fromSender = false;
          }else{
            await reset();
          }
        }mainThread();
  };
},100);
}
)();
